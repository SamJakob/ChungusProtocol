import 'dart:convert';
import 'dart:io';

import 'package:logger/logger.dart';
import 'package:slim_protocol/slim_protocol.dart';
import 'package:slim_protocol/src/core/chunk.dart';
import 'package:slim_protocol/src/core/signal.dart';
import 'package:uuid/uuid.dart';

final kDebugLogging = true;

final logger = Logger(
  printer: CustomPrettyPrinter(
    printTime: false, // Override time printing
  ),
  level: kDebugLogging ? Level.debug : Level.error,
);

void printBlankDebugLine() {
  if (kDebugLogging) {
    print('');
  }
}

extension LogNetworkEntity on NetworkEntity {
  String get log {
    return "NetworkEntity { host: ${host.host}, port: $port }";
  }
}

extension LogDatagram on Datagram {
  String get log {
    return "Datagram { from: (${address.host}, $port), length: ${data.length} }";
  }
}

extension LogIncomingChunk on IncomingChunk {
  String get log {
    return "Chunk {\n"
        "\t\tlength: $length, index: $index, hash: $hash\n"
        "\t\tcount: $count, snowflake: ${Uuid.unparse(snowflake)},\n"
        "\t\tsender: ${sender.log},\n"
        "}";
  }
}

extension LogIncomingSignal on IncomingSignal {
  String get log {
    return "Signal {\n"
        "\t\ttype: ${type.name} (${type.value}), hash: $hash\n"
        "\t\tsender: ${sender.log},\n"
        "}";
  }
}

class CustomPrettyPrinter extends LogPrinter {
  static final levelColors = {
    Level.verbose: AnsiColor.fg(AnsiColor.grey(0.5)),
    Level.debug: AnsiColor.none(),
    Level.info: AnsiColor.fg(12),
    Level.warning: AnsiColor.fg(208),
    Level.error: AnsiColor.fg(196),
    Level.wtf: AnsiColor.fg(199),
  };

  static final levelEmojis = {
    Level.verbose: '',
    Level.debug: 'üêõ ',
    Level.info: 'üí° ',
    Level.warning: '‚ö†Ô∏è ',
    Level.error: '‚õî ',
    Level.wtf: 'üëæ ',
  };

  static DateTime? _startTime;

  final int stackTraceBeginIndex;
  final int errorMethodCount;
  final int lineLength;
  final bool colors;
  final bool printEmojis;
  final bool printTime;

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex = RegExp(r'#\d+\s+(.+) \((\S+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex = RegExp(r'^((packages|dart-sdk)/\S+/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex = RegExp(r'^(?:package:)?(dart:\S+|\S+)');

  static const topLeftCorner = '‚îå';
  static const bottomLeftCorner = '‚îî';
  static const middleCorner = '‚îú';
  static const verticalLine = '‚îÇ';
  static const doubleDivider = '‚îÄ';
  static const singleDivider = '‚îÑ';

  String _topBorder = '';
  String _middleBorder = '';
  String _bottomBorder = '';

  CustomPrettyPrinter({
    this.stackTraceBeginIndex = 0,
    this.errorMethodCount = 2,
    this.lineLength = 120,
    this.colors = true,
    this.printEmojis = true,
    this.printTime = false,
  }) {
    _startTime ??= DateTime.now();

    var doubleDividerLine = StringBuffer();
    var singleDividerLine = StringBuffer();
    for (var i = 0; i < lineLength - 1; i++) {
      doubleDividerLine.write(doubleDivider);
      singleDividerLine.write(singleDivider);
    }

    _topBorder = '$topLeftCorner$doubleDividerLine';
    _middleBorder = '$middleCorner$singleDividerLine';
    _bottomBorder = '$bottomLeftCorner$doubleDividerLine';
  }

  // Handles any object that is causing JsonEncoder() problems
  Object toEncodeAbleFallback(dynamic object) {
    return object.toString();
  }

  String stringifyMessage(dynamic message) {
    final finalMessage = message is Function ? message() : message;
    if (finalMessage is Map || finalMessage is Iterable) {
      var encoder = JsonEncoder.withIndent('  ', toEncodeAbleFallback);
      return encoder.convert(finalMessage);
    } else {
      return finalMessage.toString();
    }
  }

  AnsiColor _getLevelColor(Level level) {
    if (colors) {
      return levelColors[level]!;
    } else {
      return AnsiColor.none();
    }
  }

  AnsiColor _getErrorColor(Level level) {
    if (colors) {
      if (level == Level.wtf) {
        return levelColors[Level.wtf]!.toBg();
      } else {
        return levelColors[Level.error]!.toBg();
      }
    } else {
      return AnsiColor.none();
    }
  }

  String _getEmoji(Level level) {
    if (printEmojis) {
      return levelEmojis[level]!;
    } else {
      return '';
    }
  }

  String getTime() {
    String _threeDigits(int n) {
      if (n >= 100) return '$n';
      if (n >= 10) return '0$n';
      return '00$n';
    }

    String _twoDigits(int n) {
      if (n >= 10) return '$n';
      return '0$n';
    }

    var now = DateTime.now();
    var h = _twoDigits(now.hour);
    var min = _twoDigits(now.minute);
    var sec = _twoDigits(now.second);
    var ms = _threeDigits(now.millisecond);
    var timeSinceStart = now.difference(_startTime!).toString();
    return '$h:$min:$sec.$ms (+$timeSinceStart)';
  }

  bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)!.startsWith('package:logger');
  }

  bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('packages/logger') || match.group(1)!.startsWith('dart-sdk/lib');
  }

  bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('package:logger') || match.group(1)!.startsWith('dart:');
  }

  String? formatStackTrace(StackTrace? stackTrace, int methodCount) {
    var lines = stackTrace.toString().split('\n');
    if (stackTraceBeginIndex > 0 && stackTraceBeginIndex < lines.length - 1) {
      lines = lines.sublist(stackTraceBeginIndex);
    }
    var formatted = <String>[];
    var count = 0;
    for (var line in lines) {
      if (_discardDeviceStacktraceLine(line) || _discardWebStacktraceLine(line) || _discardBrowserStacktraceLine(line) || line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      if (++count == methodCount) {
        break;
      }
    }

    if (formatted.isEmpty) {
      return null;
    } else {
      return formatted.join('\n');
    }
  }

  @override
  List<String> log(LogEvent event) {
    var messageStr = stringifyMessage(event.message);
    var errorStr = event.error?.toString();

    String? timeStr = getTime();

    String? stackTraceStr;
    if (event.stackTrace == null) {
      if (errorMethodCount > 0) {
        stackTraceStr = formatStackTrace(event.stackTrace, errorMethodCount);
      }
    }

    return _formatAndPrint(
      event.level,
      messageStr,
      timeStr,
      errorStr,
      stackTraceStr,
    );
  }

  List<String> _formatAndPrint(
    Level level,
    String message,
    String? time,
    String? error,
    String? stacktrace,
  ) {
    List<String> buffer = [];

    var color = _getLevelColor(level);

    var verticalLineAtLevel = error != null ? verticalLine + ' ' : '';

    if (error != null) {
      buffer.add(color(_topBorder));

      var errorColor = _getErrorColor(level);
      for (var line in error.split('\n')) {
        buffer.add(
          color(verticalLineAtLevel) + errorColor.resetForeground + errorColor(line) + errorColor.resetBackground,
        );
      }
      buffer.add(color(_middleBorder));

      if (stacktrace != null) {
        for (var line in stacktrace.split('\n')) {
          buffer.add(color('$verticalLineAtLevel$line'));
        }
        buffer.add(color(_middleBorder));
      }
    }

    var emoji = _getEmoji(level);

    var messageLines = message.split('\n');
    String timeStr = messageLines.length == 1 ? (time == null ? "[${time!}] " : '') : '';

    bool isFirstLine = true;
    for (var line in messageLines) {
      buffer.add(color('$verticalLineAtLevel$timeStr${isFirstLine ? emoji : ' '}$line'));
      isFirstLine = false;
    }

    if (error != null) {
      buffer.add(color(_bottomBorder));
    }

    return buffer;
  }
}
